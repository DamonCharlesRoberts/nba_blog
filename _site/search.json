[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/jokic_tracker/index.html",
    "href": "posts/jokic_tracker/index.html",
    "title": "Nikola Jokić Triple-Double tracker: 2023-2024 season",
    "section": "",
    "text": "Jokić had an insane season in 2022. Despite that, he didn’t win the league MVP. Looking at the number of triple doubles that he had in 2022 relative to 2020 and 2021 – the two years he did win the league MVP, it was clear that he was on another level. For much of the 2022 season, his AVERAGE Points Per Game, Assists Per Game, and Rebounds Per Game was a triple double.\nWith the new NBA season starting up and Jokić looking to defend the Denver Nuggets’ title, I want to follow along throughout the season to see how that triple-double machine does this season.\nTo do this, I access the nba_api library in Python. I have a script that runs daily to update the dataset and the corresponding plot below so that I can check to see whether the Nuggets played that day and whether Jokić had a triple-double in that game.\nMore specifically, this blog post is part of a Quarto blog that I have publish through a Github action and updates through Netlify. Each day, I have a Github action re-run this document.\nLet’s see how Jokić is doing.\n\n# importing some helpful dataframe and sql libraries\nimport pandas as pd\nimport duckdb as db\nimport plotly.express as px\n# importing the nba_api\nfrom nba_api.stats.static import players\nfrom nba_api.stats.endpoints import playercareerstats\nfrom nba_api.stats.endpoints import playergamelog\n# setting up in-memory duckdb connection\nconn = db.connect(':memory:')\n\n\n# Get Jokic player ID\njokic_id = players.find_players_by_last_name('Jokic')[0]['id']\n\n# Get Jokic seasons\nseasons_df = playercareerstats.PlayerCareerStats(\n    player_id=jokic_id\n).get_data_frames()[0]\nseasons_list = seasons_df['SEASON_ID'].tolist()\n\n\n# Jokic stats\nstats_list = [playergamelog.PlayerGameLog(player_id=jokic_id, season=x).get_data_frames()[0] for x in seasons_list]\njokic_stats_df = pd.concat(stats_list)\njokic_stats_df\n\n\n\n\n\n\n\n\nSEASON_ID\nPlayer_ID\nGame_ID\nGAME_DATE\nMATCHUP\nWL\nMIN\nFGM\nFGA\nFG_PCT\n...\nDREB\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nPLUS_MINUS\nVIDEO_AVAILABLE\n\n\n\n\n0\n22015\n203999\n0021501230\nAPR 13, 2016\nDEN @ POR\nL\n35\n7\n10\n0.700\n...\n7\n13\n5\n0\n0\n2\n3\n18\n4\n1\n\n\n1\n22015\n203999\n0021501198\nAPR 10, 2016\nDEN vs. UTA\nL\n36\n7\n9\n0.778\n...\n8\n11\n4\n2\n1\n1\n4\n19\n-16\n1\n\n\n2\n22015\n203999\n0021501186\nAPR 08, 2016\nDEN vs. SAS\nW\n32\n3\n9\n0.333\n...\n12\n15\n4\n1\n1\n0\n2\n8\n24\n1\n\n\n3\n22015\n203999\n0021501160\nAPR 05, 2016\nDEN vs. OKC\nL\n19\n3\n5\n0.600\n...\n2\n2\n2\n0\n2\n0\n2\n7\n-9\n1\n\n\n4\n22015\n203999\n0021501141\nAPR 02, 2016\nDEN vs. SAC\nL\n32\n2\n6\n0.333\n...\n9\n13\n5\n1\n2\n0\n2\n6\n-1\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65\n22022\n203999\n0022200051\nOCT 24, 2022\nDEN @ POR\nL\n27\n3\n4\n0.750\n...\n8\n9\n9\n0\n0\n1\n5\n9\n-10\n1\n\n\n66\n22022\n203999\n0022200035\nOCT 22, 2022\nDEN vs. OKC\nW\n39\n6\n10\n0.600\n...\n15\n16\n13\n1\n1\n3\n2\n19\n18\n1\n\n\n67\n22022\n203999\n0022200026\nOCT 21, 2022\nDEN @ GSW\nW\n34\n7\n13\n0.538\n...\n9\n12\n10\n0\n0\n5\n4\n26\n-3\n1\n\n\n68\n22022\n203999\n0022200012\nOCT 19, 2022\nDEN @ UTA\nL\n33\n12\n17\n0.706\n...\n2\n4\n6\n3\n0\n3\n4\n27\n-5\n1\n\n\n0\n22023\n203999\n0022300061\nOCT 24, 2023\nDEN vs. LAL\nW\n36\n12\n22\n0.545\n...\n10\n13\n11\n1\n1\n2\n2\n29\n15\n1\n\n\n\n\n597 rows × 27 columns\n\n\n\n\n# Create a table with the dataframe\nconn.execute(\n    '''\n    CREATE OR REPLACE TABLE main AS SELECT * FROM jokic_stats_df\n    '''\n)\n\n# Clean SEASON_ID column\n\nclean_df = conn.sql(\n    '''\n    SELECT\n        RIGHT(SEASON_ID, 4) AS season,\n        (\n            CASE \n                WHEN\n                    CAST(\n                        SPLIT_PART(\n                            strftime(\n                                strptime(GAME_DATE, '%b %d, %Y')\n                                , '%m/%d'\n                            ), '/', 1\n                        ) AS int    \n                    ) &lt; 10\n                THEN \n                    CAST(\n                        SPLIT_PART(\n                            strftime(\n                                strptime(GAME_DATE, '%b %d, %Y')\n                            , '%m/%d'\n                            ), '/', 1\n                        ) AS int    \n                    ) + 12\n                ELSE\n                    CAST(\n                        SPLIT_PART(\n                            strftime(\n                                strptime(GAME_DATE, '%b %d, %Y')\n                            , '%m/%d'\n                            ), '/', 1\n                        ) AS int\n                    )\n            END\n        ) AS game_month,\n        SPLIT_PART(strftime(strptime(GAME_DATE, '%b %d, %Y'), '%m/%d'), '/', 2) AS\n        game_day,\n        strftime(strptime(GAME_DATE, '%b %d, %Y'), '%m/%d') AS game_date,\n        (\n            CASE \n                WHEN PTS &gt;= 10 AND AST &gt;= 10 AND REB &gt;= 10 \n                    THEN 1 \n                ELSE 0 \n            END\n        ) AS triple_double\n    FROM\n        main;\n    '''\n).fetchdf()\n\nanalyzable_df = conn.sql(\n    '''\n    SELECT\n        season,\n        game_date,\n        SUM(triple_double) OVER (PARTITION BY season ORDER BY game_month, game_day) AS running_total,\n        COUNT(game_date) OVER (PARTITION BY season ORDER BY game_month, game_day) AS game_number\n    FROM\n        clean_df\n    '''\n).fetchdf()\n\ncheck_df = conn.sql(\n    '''\n    SELECT\n        season,\n        MAX(running_total),\n        MAX(game_number)\n    FROM\n        analyzable_df\n    GROUP BY\n        season\n    ORDER BY\n        season DESC\n    '''\n)\n\n\nfig = px.line(\n    analyzable_df, \n    x='game_number', y='running_total', color='season',\n    labels=dict(\n        game_number='# of Games Played', running_total='Running total of Triple-Doubles',season='Season'\n        ),\n    category_orders={\n        'season': ['2023', '2022', '2021', '2020', '2019', '2018', '2017', '2016', '2015']\n    },\n    template='plotly_dark'\n    )\n\n\n# Show the plot\nfig.show()\n\n\n\n                                                \nFigure 1: ?(caption)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nba_blog",
    "section": "",
    "text": "Nikola Jokić Triple-Double tracker: 2023-2024 season\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  }
]